--------------------------------------------------------------------------------
-- (c) Copyright 2010 - 2013 Xilinx, Inc. All rights reserved.
--
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
--
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
--
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
--
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
--------------------------------------------------------------------------------
-- Description:
-- This is an example testbench for the DDS Compiler IP core.
-- The testbench has been generated by Vivado to accompany the IP core
-- instance you have generated.
--
-- This testbench is for demonstration purposes only.  See note below for
-- instructions on how to use it with your core.
--
-- See the DDS Compiler product guide for further information
-- about this core.
--
--------------------------------------------------------------------------------
-- Using this testbench
--
-- This testbench instantiates your generated DDS Compiler core
-- instance named "dds_compiler_0".
--
-- Use Vivado's Run Simulation flow to run this testbench.  See the Vivado
-- documentation for details.
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

entity tb_dds_compiler_0 is
end tb_dds_compiler_0;

architecture tb of tb_dds_compiler_0 is


  -----------------------------------------------------------------------
  -- Timing constants
  -----------------------------------------------------------------------
  constant CLOCK_PERIOD_DDS : time := 100 us;
  constant CLOCK_PERIOD_TLV : time := 100 us;
  constant T_HOLD       : time := 10 ns;
  constant T_STROBE     : time := CLOCK_PERIOD_DDS - (1 ns);

  -----------------------------------------------------------------------
  -- DUT input signals
  -----------------------------------------------------------------------

  -- General inputs
  signal aclk                            : std_logic := '0';  -- 10 kHz DDS clock
  signal aclk2                           : std_logic := '0'; -- 500 kHz DAC control clock

  -- Phase slave channel signals
  signal s_axis_phase_tvalid             : std_logic := '0';  -- payload is valid
  signal s_axis_phase_tdata              : std_logic_vector(15 downto 0) := (others => '0');  -- data payload

  -- Data master channel signals
  signal m_axis_data_tvalid              : std_logic := '0';  -- payload is valid
  signal m_axis_data_tdata               : std_logic_vector(31 downto 0) := (others => '0');  -- data payload

  -----------------------------------------------------------------------
  -- Aliases for AXI channel TDATA and TUSER fields
  -- These are a convenience for viewing data in a simulator waveform viewer.
  -- If using ModelSim or Questa, add "-voptargs=+acc=n" to the vsim command
  -- to prevent the simulator optimizing away these signals.
  -----------------------------------------------------------------------

  -- Phase slave channel alias signals
  signal s_axis_phase_tdata_inc        : std_logic_vector(15 downto 0) := (others => '0');

  -- Data master channel alias signals
  signal m_axis_data_tdata_cosine      : std_logic_vector(9 downto 0) := (others => '0');
  signal m_axis_data_tdata_sine        : std_logic_vector(9 downto 0) := (others => '0');

   signal reset : STD_LOGIC := '1';
   signal reset2 : STD_LOGIC := '0';
   signal update_DACs : STD_LOGIC := '1';
   signal dac1A_data : STD_LOGIC_VECTOR(11 downto 0);
   signal dac1B_data : STD_LOGIC_VECTOR(11 downto 0);
   signal dac2A_data : STD_LOGIC_VECTOR(11 downto 0);
   signal dac2B_data : STD_LOGIC_VECTOR(11 downto 0);
   signal sync : STD_LOGIC;
   signal update_done : std_logic;
   signal test1 : STD_LOGIC;
   signal test2 : STD_LOGIC;
   signal test3 : STD_LOGIC;
   signal test4 : STD_LOGIC;
   signal data1 : STD_LOGIC;
   signal data2 : STD_LOGIC;
   signal sck : STD_LOGIC;
   signal clk_en : STD_LOGIC;   
   signal aclken : STD_LOGIC := '1';
     
  component tlv5637 IS
	PORT
	(
		clk : IN STD_LOGIC;
		reset : IN STD_LOGIC;
		update_DACs : IN STD_LOGIC;
		dac1A_data : IN STD_LOGIC_VECTOR(11 downto 0);
		dac1B_data : IN STD_LOGIC_VECTOR(11 downto 0);
		dac2A_data : IN STD_LOGIC_VECTOR(11 downto 0);
		dac2B_data : IN STD_LOGIC_VECTOR(11 downto 0);
		clk_en : IN STD_LOGIC;
		sync : OUT STD_LOGIC;
		update_done : out std_logic;
		test1 : OUT STD_LOGIC;
		test2 : OUT STD_LOGIC;
		test3 : OUT STD_LOGIC;
		test4 : OUT STD_LOGIC;
		data1 : OUT STD_LOGIC;
		data2 : OUT STD_LOGIC;
		sck : OUT STD_LOGIC
	);
    end component tlv5637;
	
begin

  -----------------------------------------------------------------------
  -- Instantiate the DUT
  -----------------------------------------------------------------------

  dut : entity work.dds_compiler_0
    port map (
      aclk                            => aclk, 
      aclken                          => aclken,
      s_axis_phase_tvalid             => s_axis_phase_tvalid,
      s_axis_phase_tdata              => s_axis_phase_tdata,
      m_axis_data_tvalid              => m_axis_data_tvalid,
      m_axis_data_tdata               => m_axis_data_tdata
      );

    tlv5637_ip : tlv5637
	port map
	(
		clk           => aclk2,
		reset         => reset2,
		update_DACs   => update_DACs,
		dac1A_data    => dac1A_data,
		dac1B_data    => dac1B_data,
		dac2A_data    => dac2A_data,
		dac2B_data    => dac2B_data,
		clk_en        => clk_en,
		sync          => sync,
		update_done   => update_done,
		test1         => test1,
		test2         => test2,
		test3         => test3,
		test4         => test4,
		data1         => data1,
		data2         => data2,
		sck           => sck
	);
  -----------------------------------------------------------------------
  -- Generate clock
  -----------------------------------------------------------------------

  clock_gen_dds : process
  begin
    aclk <= '0';
    wait for CLOCK_PERIOD_DDS;
      loop
        aclk <= '0';
        wait for CLOCK_PERIOD_DDS/2;
        aclk <= '1';
        wait for CLOCK_PERIOD_DDS/2;
      end loop;
  end process clock_gen_dds;
  
  
  clock_gen_tlv : process
  begin
    aclk2 <= '0';
    wait for CLOCK_PERIOD_TLV;
      loop
        aclk2 <= '0';
        wait for CLOCK_PERIOD_TLV/2;
        aclk2 <= '1';
        wait for CLOCK_PERIOD_TLV/2;
      end loop;
  end process clock_gen_tlv;

  -----------------------------------------------------------------------
  -- Generate inputs
  -----------------------------------------------------------------------

  stimuli2 : process
    begin
    -- Drive inputs T_HOLD time after rising edge of clock
    wait until rising_edge(aclk2);
    if update_done = '0' then
        update_DACs <= '0';
    else
        update_DACs <= '1';
    end if;
  end process stimuli2;
  
  
  stimuli3 : process
    variable phase : unsigned(15 downto 0) := (others => '0');
  begin
    -- Drive inputs T_HOLD time after rising edge of clock
    wait until rising_edge(aclk);

    --if(sync = '1') then
        s_axis_phase_tvalid <= '1';    
        aclken <= '1';
        phase := phase + to_unsigned(1,16);
        s_axis_phase_tdata(15 downto 0) <= std_logic_vector(phase);  -- constant phase increment
    --else
    --    s_axis_phase_tvalid <= '0';
    --    s_axis_phase_tdata(15 downto 0) <= (others => '0');
    --    aclken <= '0';
    --end if;

  end process stimuli3;

  -----------------------------------------------------------------------
  -- Check outputs
  -----------------------------------------------------------------------

  -----------------------------------------------------------------------
  -- Assign TDATA fields to aliases, for easy simulator waveform viewing
  -----------------------------------------------------------------------

  -- Phase slave channel alias signals
  s_axis_phase_tdata_inc        <= s_axis_phase_tdata(15 downto 0);
  clk_en <= '1';

  -- Data master channel alias signals: update these only when they are valid
  m_axis_data_tdata_cosine      <= m_axis_data_tdata(9 downto 0) when m_axis_data_tvalid = '1';
  m_axis_data_tdata_sine        <= m_axis_data_tdata(25 downto 16) when m_axis_data_tvalid = '1';

  dac1A_data <= "00" & m_axis_data_tdata_cosine;
  dac1B_data <= "00" & m_axis_data_tdata_sine;
    
  dac2A_data <= "00" & m_axis_data_tdata_cosine;
  dac2B_data <= "00" & m_axis_data_tdata_sine;

end tb;

